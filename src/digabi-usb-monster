#!/bin/bash

TITLE=USB-monster
BURNER=/usr/local/lib/digabi-dd-curses/digabi-dd-curses

is_abitti_ktp () {
  if [ -n "$(uname -r | grep '\-ytl-')" ]; then
    echo "is_abitti"
  fi
}

show_popup () {
  zenity_path=`which zenity`
  if [ -n $zenity_path ]; then
    zenity --info --title="$TITLE" --width=400 --text="$1"
  fi
}

write_message () {
  if [ -n "`which logger`" ]; then
    logger "[$TITLE] $1"
  fi

  echo "$TITLE: $1" >&2
}

try_xterm () {
  which $1
}

get_xterm_path () {
  for this_xterm in $(which terminator) $(which xfce4-terminal)
  do
    if [ -x ${this_xterm} ]; then
      write_message "Using ${this_xterm} as the X terminal emulator variant"
      echo ${this_xterm}
      return
    fi
  done

  write_message "None of known X terminal emulator variants was found"
}

get_file_ext () {
  EXTPATH=$1
  EXTNAME=`basename ${EXTPATH}`
  EXT=${EXTNAME##*.}
  echo $EXT
}

unzip_etcher_zip () {
  ETCHERZIP=$1
  ETCHERZIPBASENAME=`basename $1`
  ETCHERTEMP=`mktemp --tmpdir -d usb-monster-etcher.XXXXX`
  unzip -qq ${ETCHERZIP} ytl/ktp.img ytl/koe.img -d ${ETCHERTEMP} \
    | zenity --title="$TITLE" --text="Unpacking ${ETCHERZIPBASENAME}..." --no-cancel --progress --pulsate --auto-close
  ETCHERZIPIMAGE=`find ${ETCHERTEMP} | grep .img`

  if [ -z "${ETCHERZIPIMAGE}" ]
  then
    # File does not contain valid image file
    echo
  else
    ETCHERIMAGE=`mktemp --tmpdir usb-monster.XXXXX`
    mv ${ETCHERZIPIMAGE} ${ETCHERIMAGE}
    rm -fR ${ETCHERTEMP}
    echo ${ETCHERIMAGE}
  fi
}

execute_burner () {
  IMAGE=$1
  XTERM=$2

  # Start without asking anything - this works with Abitti KTP
  SUDO_METHOD="Execute $BURNER with a non-interactive sudo"
  sudo -n -- $XTERM -x $BURNER $IMAGE
  if [ $? -eq 0 ]; then
    write_message "Executing 'sudo' succeeded: $SUDO_METHOD"
    return 0
  else
    write_message "Executing 'sudo' failed: $SUDO_METHOD"
  fi

  # Try using ssh-askpass without askpass helper path
  SUDO_METHOD="Execute $BURNER with ssh-askpass-version of sudo (no helper given)"
  sudo -A -- $XTERM -x $BURNER $IMAGE
  if [ $? -eq 0 ]; then
    write_message "Executing 'sudo' succeeded: $SUDO_METHOD"
    return 0
  else
    write_message "Executing 'sudo' failed: $SUDO_METHOD"
  fi

  # Try using ssh-askpass with askpass helper path set
  SUDO_METHOD="Execute $BURNER with ssh-askpass-version of sudo (using pre-set helper /usr/bin/ssh-askpass)"
  SUDO_ASKPASS=/usr/bin/ssh-askpass sudo -A -- $XTERM -x $BURNER $IMAGE
  if [ $? -eq 0 ]; then
    write_message "Executing 'sudo' succeeded: $SUDO_METHOD"
    return 0
  else
    write_message "Executing 'sudo' failed: $SUDO_METHOD"
  fi

  # Try asking user password - this is possibly insecure but should work in most environments
  SUDO_METHOD="Execute $BURNER with getting user password using zenity and feedin it to sudo via STDIN"
  zenity --password --title="$TITLE: Enter your password" | sudo -S -- $XTERM -x $BURNER $IMAGE
  if [ $? -eq 0 ]; then
    write_message "Executing 'sudo' succeeded: $SUDO_METHOD"
    return 0
  else
    write_message "Executing 'sudo' failed: $SUDO_METHOD"
  fi

  # None of the methods gaining sudo access did not work
  return 1
}


if [ -z "`which zenity`" ]; then
  write_message "Please install zenity"
  show_popup "Please install zenity"
  exit 1
fi

XTERMPATH=$(get_xterm_path)
if [ -z ${XTERMPATH} ]; then
  write_message "Please install a supported x-terminal-emulator (terminator or xfce4-terminal)"
  show_popup "Please install a supported x-terminal-emulator (terminator or xfce4-terminal)"
  exit 1
fi

if [ ! -x ${BURNER} ]; then
  write_message "Please install burner script to $BURNER"
  show_popup "Please install burner script to $BURNER"
  exit 1
fi

IMAGEPATH=${HOME}/*
if [ -n "$(is_abitti_ktp)" ]; then
  if [ -d /media/usb1 ]; then
    IMAGEPATH=/media/usb1/*
  else
    IMAGEPATH=/media/*
  fi
fi

IMAGEFILE=
while [ -z ${IMAGEFILE} ]; do
  IMAGEFILE=`zenity --file-selection --filename=${IMAGEPATH} --title="$TITLE: Select Image File" --file-filter="Image file (.dd, .img, .zip)| *.dd *.img *.zip"`

  if [ -z ${IMAGEFILE} ]; then
    write_message "Cancelled!"
    show_popup "Cancelled!"
    exit 0
  fi

  IMAGE_EXT=`get_file_ext ${IMAGEFILE}`

  if [ "${IMAGE_EXT}" = "zip" ]; then
    write_message "User selected .zip file, trying to extract Etcher zip"
    UNZIPPED_IMAGEFILE=`unzip_etcher_zip ${IMAGEFILE}`
    if [ -z "${UNZIPPED_IMAGEFILE}" ]; then
      write_message "File ${IMAGEFILE} does not contain MEB image file"
      show_popup "File ${IMAGEFILE} does not contain MEB image file"
      exit 1
    fi
    IMAGEFILE="${UNZIPPED_IMAGEFILE}"
  fi

  if [ ! -r ${IMAGEFILE} ]; then
    write_message "File $IMAGEFILE is not readable. Exiting."
    show_popup "File $IMAGEFILE is not readable. Exiting."
    exit 1
  fi
done

while [ true ]; do
  execute_burner ${IMAGEFILE} ${XTERMPATH}
  if [ $? -gt 0 ]; then
    write_message "Failed to get superuser privileges"
    show_popup "Failed to get superuser privileges. See system log for more information."
    exit 1
  fi

  zenity --question --title="$TITLE: Again?" --text="Write another set with same image file?" --cancel-label="Write again" --ok-label="Finish writing"
  if [ $? -ne 1 ]; then
    # Normal termination
    write_message "Normal termination"
    exit 0
  fi
done
